# Generated by Django 4.2.24 on 2025-09-14 11:05

from django.db import migrations, connection


def rename_indexes_safely(apps, schema_editor):
    """Safely rename indexes by dropping old ones and creating new ones."""
    with connection.cursor() as cursor:
        # Get existing indexes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'core_asset%'")
        existing_indexes = [idx[0] for idx in cursor.fetchall()]
        
        # Define the renames we want to do (old_name, new_name, field_name)
        renames = [
            ('core_asset_block_dc43e9_idx', 'core_asset_block_531195_idx', 'block'),
            ('core_asset_parcel_38f908_idx', 'core_asset_parcel_ebd705_idx', 'parcel'),
            ('core_asset_subparcel_ec1101_idx', 'core_asset_subparc_d57846_idx', 'subparcel'),
        ]
        
        for old_name, new_name, field_name in renames:
            if old_name in existing_indexes and new_name not in existing_indexes:
                # Drop the old index
                cursor.execute(f"DROP INDEX {old_name}")
                print(f"Dropped old index: {old_name}")
                
                # Create the new index
                cursor.execute(f"CREATE INDEX {new_name} ON core_asset ({field_name})")
                print(f"Created new index: {new_name}")
            elif new_name in existing_indexes:
                print(f"Index {new_name} already exists, skipping")
            else:
                print(f"Index {old_name} not found, skipping")


def reverse_rename_indexes(apps, schema_editor):
    """Reverse the index renames by dropping new ones and creating old ones."""
    with connection.cursor() as cursor:
        # Get existing indexes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'core_asset%'")
        existing_indexes = [idx[0] for idx in cursor.fetchall()]
        
        # Define the reverse renames (new_name, old_name, field_name)
        reverse_renames = [
            ('core_asset_block_531195_idx', 'core_asset_block_dc43e9_idx', 'block'),
            ('core_asset_parcel_ebd705_idx', 'core_asset_parcel_38f908_idx', 'parcel'),
            ('core_asset_subparc_d57846_idx', 'core_asset_subparcel_ec1101_idx', 'subparcel'),
        ]
        
        for new_name, old_name, field_name in reverse_renames:
            if new_name in existing_indexes and old_name not in existing_indexes:
                # Drop the new index
                cursor.execute(f"DROP INDEX {new_name}")
                print(f"Dropped new index: {new_name}")
                
                # Create the old index
                cursor.execute(f"CREATE INDEX {old_name} ON core_asset ({field_name})")
                print(f"Created old index: {old_name}")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0025_rename_asset_fields'),
    ]

    operations = [
        migrations.RunPython(rename_indexes_safely, reverse_rename_indexes),
    ]
