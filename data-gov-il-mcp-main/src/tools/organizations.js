/**
 * ◊õ◊ú◊ô list_organizations - ◊†◊ô◊î◊ï◊ú ◊ï◊ó◊ô◊§◊ï◊© ◊ê◊®◊í◊ï◊†◊ô◊ù ◊û◊û◊©◊ú◊™◊ô◊ô◊ù
 */

import { z } from 'zod';
import { ckanRequest } from '../utils/api.js';
import { createErrorResponse } from '../utils/formatters.js';

/**
 * ◊û◊§◊®◊û◊ò ◊®◊©◊ô◊û◊™ ◊ê◊®◊í◊ï◊†◊ô◊ù
 * @param {Array} organizations - ◊®◊©◊ô◊û◊™ ◊ê◊®◊í◊ï◊†◊ô◊ù (◊©◊û◊ï◊™ ◊ë◊ú◊ë◊ì)
 * @returns {Array} ◊ë◊ú◊ï◊ß◊ô ◊™◊ï◊õ◊ü ◊û◊§◊ï◊®◊û◊ò◊ô◊ù
 */
function formatOrganizationsList(organizations) {
  const orgCount = organizations.length;

  const mainContent = [
    `üèõÔ∏è Found ${orgCount} government organizations`,
    '',
    'üìã Organizations list:',
    JSON.stringify(organizations, null, 2)
  ].join('\n');

  const guidanceContent = [
    'üí° WORKING WITH ORGANIZATIONS:',
    '',
    'üîç NEXT STEPS:',
    '‚Ä¢ Use get_organization_info with organization name for details',
    '‚Ä¢ Organization names are usually in English (lowercase)',
    '‚Ä¢ Example: get_organization_info("ministry-of-health")',
    '',
    'üìä ANALYSIS OPTIONS:',
    '‚Ä¢ Find datasets by organization using find_datasets',
    '‚Ä¢ Filter search results by organization',
    '‚Ä¢ Compare data coverage across ministries',
    '',
    'üè¢ ORGANIZATION CATEGORIES:',
    '‚Ä¢ Government Ministries (◊û◊©◊®◊ì◊ô ◊û◊û◊©◊ú◊î)',
    '‚Ä¢ Local Authorities (◊®◊©◊ï◊ô◊ï◊™ ◊û◊ß◊ï◊û◊ô◊ï◊™)', 
    '‚Ä¢ Public Companies (◊ó◊ë◊®◊ï◊™ ◊û◊û◊©◊ú◊™◊ô◊ï◊™)',
    '‚Ä¢ Regulatory Bodies (◊í◊ï◊§◊ô ◊§◊ô◊ß◊ï◊ó)',
    '',
    'üéØ COMMON USE CASES:',
    '‚Ä¢ Research government transparency by ministry',
    '‚Ä¢ Find all health-related datasets from Ministry of Health',
    '‚Ä¢ Compare municipal data across different cities',
    '‚Ä¢ Track data publication frequency by organization'
  ].join('\n');

  return [mainContent, guidanceContent];
}

/**
 * ◊û◊§◊®◊û◊ò ◊û◊ô◊ì◊¢ ◊û◊§◊ï◊®◊ò ◊¢◊ú ◊ê◊®◊í◊ï◊ü
 * @param {Object} organization - ◊†◊™◊ï◊†◊ô ◊î◊ê◊®◊í◊ï◊ü
 * @returns {Array} ◊ë◊ú◊ï◊ß◊ô ◊™◊ï◊õ◊ü ◊û◊§◊ï◊®◊û◊ò◊ô◊ù
 */
function formatOrganizationInfo(organization) {
  const basicInfo = [
    `üèõÔ∏è Organization: ${organization.title || organization.display_name || organization.name}`,
    '',
    `üìù Name: ${organization.name}`,
    `üåê Type: ${organization.type || 'Government'}`,
    `üìÖ Created: ${organization.created ? new Date(organization.created).toLocaleDateString() : 'N/A'}`,
    `üë• Followers: ${organization.num_followers || 0}`,
    `‚≠ê State: ${organization.state || 'N/A'}`,
    '',
    `üìÑ Description:`,
    organization.description || organization.notes || 'No description available'
  ].join('\n');

  const technicalInfo = [
    'üîß TECHNICAL INFO:',
    '',
    `üìã ID: ${organization.id}`,
    `üñºÔ∏è Image URL: ${organization.image_url || 'None'}`,
    `üîó Image Display URL: ${organization.image_display_url || 'None'}`,
    `üìä Is Organization: ${organization.is_organization}`,
    `‚úÖ Approval Status: ${organization.approval_status || 'N/A'}`,
    '',
    'üë• USERS:',
    organization.users && organization.users.length > 0 
      ? organization.users.map(user => `‚Ä¢ ${user.display_name || user.name} (${user.capacity})`).join('\n')
      : '‚Ä¢ No users information available',
    '',
    'üîó EXTRAS:',
    organization.extras && organization.extras.length > 0
      ? organization.extras.map(extra => `‚Ä¢ ${extra.key}: ${extra.value}`).join('\n')
      : '‚Ä¢ No extra information available'
  ].join('\n');

  const usageGuidance = [
    'üí° EXPLORE THIS ORGANIZATION:',
    '',
    'üîç FIND DATASETS:',
    `‚Ä¢ find_datasets with organization-related keywords`,
    `‚Ä¢ Search by organization domain or type`,
    '',
    'üìä ANALYZE DATA:',
    '‚Ä¢ Use find_datasets to discover this organization\'s datasets',
    '‚Ä¢ Look for patterns in data publication',
    '‚Ä¢ Compare with other similar organizations',
    '',
    'üéØ RESEARCH OPPORTUNITIES:',
    '‚Ä¢ Government transparency analysis',
    '‚Ä¢ Data publication trends over time', 
    '‚Ä¢ Cross-ministry data correlation',
    '‚Ä¢ Public data accessibility assessment'
  ].join('\n');

  return [basicInfo, technicalInfo, usageGuidance];
}

/**
 * ◊®◊ô◊©◊ï◊ù ◊î◊õ◊ú◊ô◊ù ◊ë◊û◊¢◊®◊õ◊™ MCP
 * @param {McpServer} mcp - ◊©◊®◊™ MCP
 */
export function registerOrganizationTools(mcp) {
  // ◊õ◊ú◊ô ◊ú◊®◊©◊ô◊û◊™ ◊õ◊ú ◊î◊ê◊®◊í◊ï◊†◊ô◊ù
  mcp.tool(
    "list_organizations",
    {},
    async () => {
      try {
        console.error('üèõÔ∏è Fetching organizations list from data.gov.il...');
        
        const response = await ckanRequest('organization_list');
        
        const organizations = response.result;
        console.error(`‚úÖ Retrieved ${organizations.length} organizations`);
        
        const contentBlocks = formatOrganizationsList(organizations);
        
        return {
          content: contentBlocks.map(block => ({
            type: "text",
            text: block
          }))
        };
        
      } catch (error) {
        console.error('‚ùå Error in list_organizations:', error.message);
        
        return createErrorResponse(
          'list_organizations',
          error,
          [
            'Check your internet connection',
            'The government API might be temporarily unavailable',
            'Try again in a moment'
          ]
        );
      }
    }
  );

  // ◊õ◊ú◊ô ◊ú◊û◊ô◊ì◊¢ ◊û◊§◊ï◊®◊ò ◊¢◊ú ◊ê◊®◊í◊ï◊ü ◊°◊§◊¶◊ô◊§◊ô
  mcp.tool(
    "get_organization_info",
    {
      organization: z.string().describe("Organization name or ID. Examples: 'ministry-of-health', 'tel-aviv-yafo', 'cbs'. Use list_organizations to see all available organizations")
    },
    async ({ organization }) => {
      try {
        console.error(`üèõÔ∏è Getting detailed info for organization: ${organization}...`);
        
        const response = await ckanRequest('organization_show', { 
          id: organization
        });
        
        const orgInfo = response.result;
        console.error(`‚úÖ Retrieved detailed info for organization '${organization}'`);
        
        const contentBlocks = formatOrganizationInfo(orgInfo);
        
        return {
          content: contentBlocks.map(block => ({
            type: "text",
            text: block
          }))
        };
        
      } catch (error) {
        console.error(`‚ùå Error in get_organization_info for organization ${organization}:`, error.message);
        
        return createErrorResponse(
          `get_organization_info for organization '${organization}'`,
          error,
          [
            'Check if organization name is correct',
            'Use list_organizations to see all available organizations', 
            'Organization names are usually in English and lowercase',
            'Try variations like "ministry-of-health" or "health"',
            'Some organizations may use Hebrew names'
          ]
        );
      }
    }
  );
}