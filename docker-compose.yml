version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: realestate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend-django
      dockerfile: Dockerfile
    environment:
      - DEBUG=true
      - SECRET_KEY=django-insecure-development-secret-key-change-in-production-2024
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,testserver
      - USE_POSTGRES=true
      - POSTGRES_DB=realestate
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/realestate
      - USE_CELERY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKEND_URL=http://localhost:8000
      - FRONTEND_URL=http://localhost:3000
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - RESEND_API_KEY=${RESEND_API_KEY:-}
      - RESEND_FROM=${RESEND_FROM:-"RealEstate Agent <no-reply@nadlaner.com>"}
      - RESEND_REPLY_TO=${RESEND_REPLY_TO:-support@nadlaner.com}
      - RESEND_SANDBOX=${RESEND_SANDBOX:-false}
      - EMAIL_FALLBACK_TO_CONSOLE=${EMAIL_FALLBACK_TO_CONSOLE:-false}
      - RESEND_WEBHOOK_SECRET=${RESEND_WEBHOOK_SECRET:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-django:/app
      - media_volume:/app/media
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery-worker:
    build:
      context: ./backend-django
      dockerfile: Dockerfile
    environment:
      - DEBUG=true
      - SECRET_KEY=django-insecure-development-secret-key-change-in-production-2024
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,testserver
      - USE_POSTGRES=true
      - POSTGRES_DB=realestate
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/realestate
      - USE_CELERY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - RESEND_API_KEY=${RESEND_API_KEY:-}
      - RESEND_FROM=${RESEND_FROM:-"RealEstate Agent <no-reply@nadlaner.com>"}
      - RESEND_REPLY_TO=${RESEND_REPLY_TO:-support@nadlaner.com}
      - RESEND_SANDBOX=${RESEND_SANDBOX:-false}
      - EMAIL_FALLBACK_TO_CONSOLE=${EMAIL_FALLBACK_TO_CONSOLE:-false}
      - RESEND_WEBHOOK_SECRET=${RESEND_WEBHOOK_SECRET:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-django:/app
      - media_volume:/app/media
    command: celery -A broker_backend worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend-django
      dockerfile: Dockerfile
    environment:
      - DEBUG=true
      - SECRET_KEY=django-insecure-development-secret-key-change-in-production-2024
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,testserver
      - USE_POSTGRES=true
      - POSTGRES_DB=realestate
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/realestate
      - USE_CELERY=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - RESEND_API_KEY=${RESEND_API_KEY:-}
      - RESEND_FROM=${RESEND_FROM:-"RealEstate Agent <no-reply@nadlaner.com>"}
      - RESEND_REPLY_TO=${RESEND_REPLY_TO:-support@nadlaner.com}
      - RESEND_SANDBOX=${RESEND_SANDBOX:-false}
      - EMAIL_FALLBACK_TO_CONSOLE=${EMAIL_FALLBACK_TO_CONSOLE:-false}
      - RESEND_WEBHOOK_SECRET=${RESEND_WEBHOOK_SECRET:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend-django:/app
      - media_volume:/app/media
    command: celery -A broker_backend beat --loglevel=info

  # Frontend UI
  frontend:
    build:
      context: ./realestate-broker-ui
      dockerfile: Dockerfile
    environment:
      - BACKEND_URL=http://localhost:8000
      - NEXT_PUBLIC_MCP_YAD2_URL=http://localhost:8001
      - NEXT_PUBLIC_MCP_GOV_URL=http://localhost:8002
      - NEXT_PUBLIC_MCP_GIS_URL=http://localhost:8003
      - NEXT_PUBLIC_MCP_MAVAT_URL=http://localhost:8004
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./realestate-broker-ui:/app
      - /app/node_modules
      - /app/.next

  # MCP Servers
  # Yad2 MCP Server
  yad2-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    environment:
      - MCP_YAD2_PORT=8001
    ports:
      - "8001:8001"
    volumes:
      - ./yad2:/app/yad2
      - ./orchestration:/app/orchestration
      - ./utils:/app/utils
      - ./tests:/app/tests
      - yad2_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python -m yad2.mcp.server

  # RAMI MCP Server
  rami-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    environment:
      - MCP_GOV_PORT=8002
    ports:
      - "8002:8002"
    volumes:
      - ./gov:/app/gov
      - ./orchestration:/app/orchestration
      - ./utils:/app/utils
      - ./tests:/app/tests
      - gov_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python -m gov.mcp.server

  # GIS MCP Server
  gis-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    environment:
      - MCP_GIS_PORT=8003
    ports:
      - "8003:8003"
    volumes:
      - ./gis:/app/gis
      - ./orchestration:/app/orchestration
      - ./utils:/app/utils
      - ./tests:/app/tests
      - gis_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python -m gis.mcp.server

  # Government Data MCP Server
  gov-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    environment:
      - MCP_MAVAT_PORT=8004
    ports:
      - "8004:8004"
    volumes:
      - ./mavat:/app/mavat
      - ./orchestration:/app/orchestration
      - ./utils:/app/utils
      - ./tests:/app/tests
      - mavat_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python -m mavat.mcp.server

volumes:
  postgres_data:
  media_volume:
  yad2_data:
  gov_data:
  gis_data:
  mavat_data:
